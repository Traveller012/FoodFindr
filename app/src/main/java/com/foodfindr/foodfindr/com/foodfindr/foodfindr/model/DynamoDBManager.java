package com.foodfindr.foodfindr.com.foodfindr.foodfindr.model;

import android.content.Context;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.util.Log;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBAttribute;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBAutoGeneratedKey;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBHashKey;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBScanExpression;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBTable;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.PaginatedScanList;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.foodfindr.foodfindr.MainActivity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

public class DynamoDBManager {

    private static final String TAG = "DynamoDBManager";

    public static ArrayList<RestaurantData> getRestaurantData(List<String> foodItems) {

        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        List<AttributeValue> attributeValues = new ArrayList<AttributeValue>();
        for (String foodItem: foodItems) {
            AttributeValue value = new AttributeValue(foodItem);
            attributeValues.add(value);
        }


        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
        scanExpression.addFilterCondition("Menu_Items",
                new Condition()
                        .withComparisonOperator(ComparisonOperator.CONTAINS)
                        .withAttributeValueList(new AttributeValue().withL(attributeValues)));
        try {
            PaginatedScanList<RestaurantData> result = mapper.scan(
                    RestaurantData.class, scanExpression);

            ArrayList<RestaurantData> resultList = new ArrayList<RestaurantData>();
            for (RestaurantData up : result) {
                resultList.add(up);
            }
            return resultList;

        } catch (AmazonServiceException ex) {
            MainActivity.clientManager
                    .wipeCredentialsOnAuthError(ex);
            Log.e(TAG, "Got Exception when Scanning", ex);
        }

        return null;
    }

    public static ArrayList<String> getRestaurantDataFromRestaurantName(String scannedText) {

        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();

        ScanRequest scanRequest = new ScanRequest()
                .withTableName("Restaurant_Data")
                .withProjectionExpression("Restaurant_Name");

        ScanResult result = ddb.scan(scanRequest);
        ArrayList<String> resultList = new ArrayList<String>();
        for (Map<String, AttributeValue> item : result.getItems()){
            Collection<AttributeValue> values = item.values();
            for (AttributeValue value:values) {
                if(scannedText.contains(value.getS())){//if scanned text has restaurant name
                    resultList.add(value.getS());
                }
            }

        }
        return resultList;
    }

    private static ArrayList<String> getMenuItems(String restaurantName) {
        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();

        ScanRequest scanRequest = new ScanRequest()
                .withTableName("Restaurant_Data")
                .withProjectionExpression("Restaurant_Name");

        return new ArrayList<String>();

    }

    private static Location getRestaurantLocation(String restaurantAddress,Context context) {
        Geocoder coder = new Geocoder(context);
        List<Address> address;
        try {
            address = coder.getFromLocationName(restaurantAddress, 5);
            if (address == null) {
                return null;
            }
            Address addressLocation = address.get(0);
            Location location = new Location("Target");
            location.setLatitude(addressLocation.getLatitude());
            location.setLongitude(addressLocation.getLongitude());
            return location;
        }catch (Exception e){
            Log.e(TAG, "Exception occured when getting location of restaurant", e);
        }
        return null;
    }

    public static void insertBillData(BillDetails billDetails) {
        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        try {
            mapper.save(billDetails);
        } catch (AmazonServiceException ex) {
            Log.e(TAG, "Error inserting bill");
            MainActivity.clientManager
                    .wipeCredentialsOnAuthError(ex);
        }
    }

    public static void insertUserData(User user) {
        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        try {
            mapper.save(user);
        } catch (AmazonServiceException ex) {
            Log.e(TAG, "Error inserting user");
            MainActivity.clientManager
                    .wipeCredentialsOnAuthError(ex);
        }
    }


    public static List<UserRecommendation> getUserRecommendations(Long userID) {

        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        List<UserRecommendation> resultList = new ArrayList<UserRecommendation>();


        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
        scanExpression.addFilterCondition("User_ID",
                new Condition()
                        .withComparisonOperator(ComparisonOperator.EQ)
                        .withAttributeValueList(new AttributeValue().withN(userID.toString())));

        try {
            final PaginatedScanList<UserRecommendation> userRecommendations = mapper.scan(UserRecommendation.class, scanExpression);

            for (UserRecommendation userRecommendation : userRecommendations) {
                resultList.add(userRecommendation);
            }
        } catch (AmazonServiceException ex) {
            MainActivity.clientManager
                    .wipeCredentialsOnAuthError(ex);
        }
        return resultList;
    }

    public static List<RestaurantData> getRestaurantNearby(List<String> foodItems, Location location, Context context) {
        AmazonDynamoDBClient ddb = MainActivity.clientManager
                .ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);
        List<RestaurantData> finalRestaurantDataList = new ArrayList<RestaurantData>(); //all restaurant details nearby

        List<RestaurantData> restaurantDataList = getRestaurantData(foodItems);
        for (RestaurantData restaurantData:restaurantDataList) {

            final String restaurantAddress = restaurantData.getRestaurantAddress();//for each rest address

            Location target = getRestaurantLocation(restaurantAddress,context);
            if(location.distanceTo(target) < 5000) {
                finalRestaurantDataList.add(restaurantData);
            }
        }
        return finalRestaurantDataList;
    }


}
